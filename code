# **Machine learning program for personality prediction based on the common words used in each personality type**

all captions are eenchanced by chatgpt for clearance!
# **Step 1: Data Loading and Preprocessing**
Importing Libraries and Loading Data

# Importing necessary libraries (ChatGPT, 2023)
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
import wordcloud
from wordcloud import WordCloud, STOPWORDS
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, recall_score
from xgboost import XGBClassifier
from sklearn.svm import SVC
import nltk
from collections import Counter
from nltk.corpus import stopwords
nltk.download('stopwords')

# Ignore warnings for cleaner output (ChatGPT, 2023)
import warnings
warnings.filterwarnings('ignore')

# Mount Google Drive to access files (ChatGPT, 2023)
from google.colab import drive
drive.mount('/content/drive')

# Load MBTI dataset from Google Drive
MBTI = pd.read_csv('/content/drive/MyDrive/MBTI 5002.csv')

# Display the first few rows of the MBTI dataset (ChatGPT, 2023)
MBTI.head()

# Display information about the structure and data types of the MBTI dataset (ChatGPT, 2023)
MBTI.info()

#Checking if there are any missing or null values present in the dataset, as you can see there are no missing or null values (ChatGPT, 2023)
data_frame = pd.DataFrame(MBTI)

missing_values = data_frame.isnull().any()

print(missing_values)

# Define a function to remove stopwords from text (ChatGPT, 2023)
def remove_stopwords(text):
    stop_words = set(stopwords.words('english'))

     # Add additional stopwords as not listed in the tool we are using (ChatGPT, 2023)
    stop_words.add('like')
    words = [word for word in text.split() if word.lower() not in stop_words]
    return ' '.join(words)

# Apply the function to the text column
# Replace 'posts' with the actual name of the column containing text data
MBTI['posts'] = MBTI['posts'].apply(remove_stopwords)

# Display the modified DataFrame
print(MBTI.head())

# Rename the 'type' column to 'Personality Type' for clarity (ChatGPT, 2023)
MBTI = MBTI.rename(columns={'type':'Personality Type'})

# **Step 2: Data Visualization**

# Exploring the distribution of personality types, the bars represent the number of observations for each personality type in the dataset. As you can see it is difficult to see which personality type has the most observations in this chart. (ChatGPT, 2023)
plt.figure(figsize=(10, 6))
sns.countplot(x='Personality Type', data=MBTI)
plt.title('Distribution of Personality Types')
plt.xlabel('Personality Type')
plt.ylabel('Count')
plt.show()

#Sort distribution in decending order (ChatGPT, 2023)
plt.figure(figsize=(10, 6))
sns.countplot(x='Personality Type', data=MBTI, order=MBTI['Personality Type'].value_counts().index)
plt.title('Distribution of Personality Types')
plt.xlabel('Personality Type')
plt.ylabel('Count')
plt.show()

#These are the specific numbers of observations for each personality type in the dataset (ChatGPT, 2023)
MBTI['Personality Type'].value_counts()

#Finding the most common words in all posts. (ChatGPT, 2023)
words = list(MBTI["posts"].apply(lambda x: x.split()))
words = [x for y in words for x in y]
Counter(words).most_common(40)

#Plotting the most common words with WordCloud. WordCloud is a technique to show which words are the most frequent among the given text. (ChatGPT, 2023)
wc = wordcloud.WordCloud(width=1200, height=500,
                         collocations=False, background_color="black",
                         colormap="tab20b").generate(" ".join(words))

# collocations to False  is set to ensure that the word cloud doesn't appear as if it contains any duplicate words (ChatGPT, 2023)
plt.figure(figsize=(25,10))
# generate word cloud, interpolation (ChatGPT, 2023)
plt.imshow(wc, interpolation='bilinear')
_ = plt.axis("off")

# Generate and display word clouds for each personality type (ChatGPT, 2023)
fig, ax = plt.subplots(len(MBTI['Personality Type'].unique()), sharex=True, figsize=(15,len(MBTI['Personality Type'].unique())))
k = 0

# Iterate through each personality type (ChatGPT, 2023)
for i in MBTI['Personality Type'].unique():
    MBTI_4 = MBTI[MBTI['Personality Type'] == i]

    # Generate a word cloud for the posts of the current personality type (ChatGPT, 2023)
    wordcloud = WordCloud(max_words=1628,relative_scaling=1,normalize_plurals=False).generate(MBTI_4['posts'].to_string())

    # Plot the word cloud for the current personality type (ChatGPT, 2023)
    plt.subplot(4,4,k+1)
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.title(i)
    ax[k].axis("off")
    k+=1

# **Step 3: Feature Engineering and Model Building**

# Calculate and describe the length of posts in the MBTI dataset (ChatGPT, 2023)
MBTI['Length'] = MBTI['posts'].apply(lambda x: len(x.split(' ')))
# Display descriptive statistics of the post lengths
MBTI['Length'].describe()

# Create a sample of the MBTI dataset for prediction (1% of the original dataset as the dataset is too big) (ChatGPT, 2023)
MBTI_Pred = MBTI.sample(frac=0.01)
# Display the length of the prediction dataset
len(MBTI_Pred)

# Improved visualization of the distribution of classes in the prediction dataset (ChatGPT, 2023)
plt.figure(figsize=(12, 6))
sns.countplot(x='Personality Type', data=MBTI_Pred, order=MBTI_Pred['Personality Type'].value_counts().index, palette='viridis')
plt.title('Distribution of Personality Types in Prediction Dataset')
plt.xlabel('Personality Type')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility (ChatGPT, 2023)
plt.show()

# Extracting words from posts in the prediction dataset (ChatGPT, 2023)
Words = list()
for post in MBTI_Pred['posts']:
    for word in post.split(' '):
        Words.append(word)

# Create a word frequency dictionary using Counter for the 'Words' list (ChatGPT, 2023)
Words_dic = Counter(Words)
# Convert the word frequency dictionary to a DataFrame (ChatGPT, 2023)
Words_dic = pd.DataFrame({'Word':list(Words_dic.keys()),'Frequency':list(Words_dic.values())})
# Sort the DataFrame based on frequency in descending order
Words_dic.sort_values('Frequency',ascending=False,inplace=True)
# Set the 'Word' column as the index for better readability (ChatGPT, 2023)
Words_dic.set_index('Word',inplace=True)
# Print the length of the resulting DataFrame and display the top rows (ChatGPT, 2023)
print(len(Words_dic))
Words_dic.head()

# Descriptive statistics of the 'Frequency' column in Words_df DataFrame (ChatGPT, 2023)
Words_dic['Frequency'].describe()

# Print quantiles of the 'Frequency' column in Words_df DataFrame for specified percentiles (ChatGPT, 2023)
for i in [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]:
    print(Words_dic['Frequency'].quantile(i))

# Print higher percentiles of the 'Frequency' column in Words_df DataFrame (ChatGPT, 2023)
for i in [0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99]:
    print(Words_dic['Frequency'].quantile(i))

# Filter Words_dic DataFrame to include only rows where 'Frequency' is greater than 1341.65 (ChatGPT, 2023)
Words_dic = Words_dic[Words_dic.Frequency>1341.6500000000087]
# Print the length of the filtered DataFrame
len(Words_dic)

# Create binary columns in MBTI DataFrame for each word in Final_Words based on their presence in the 'posts' column (ChatGPT, 2023)
Final_Words = list(Words_dic.index)
for i in Final_Words:
    MBTI[i] = MBTI['posts'].apply(lambda x: 1 if i in x.split(' ') else 0)
# Drop unnecessary columns ('Length' and 'posts') from MBTI DataFrame (ChatGPT, 2023)
MBTI.drop(['Length','posts'],axis=1,inplace=True)
# Display the first few rows of the modified MBTI DataFrame (ChatGPT, 2023)
MBTI.head()

# Get the length of the MBTI object (ChatGPT, 2023)
len(MBTI)

# Conduct exploratory data analysis (EDA) on MBTI DataFrame by grouping by 'Personality Type' and calculating the mean (ChatGPT, 2023)
MBTI_EDA = MBTI.groupby('Personality Type').mean()
# Transpose the resulting EDA DataFrame for better readability (ChatGPT, 2023)
MBTI_EDA = MBTI_EDA.transpose()
# Display the first few rows of the transposed EDA DataFrame (ChatGPT, 2023)
MBTI_EDA.head()

len(MBTI_EDA)

# Extract EDA data for the ENFJ personality type, sort, and select the top 20 (ChatGPT, 2023)
MBTI_EDA_ENFJ = MBTI_EDA[['ENFJ']]
MBTI_EDA_ENFJ.sort_values('ENFJ', ascending=False, inplace=True)
MBTI_EDA_ENFJ = MBTI_EDA_ENFJ.head(20)

# Set up a horizontal bar plot with annotations using a vivid color palette (ChatGPT, 2023)
plt.figure(figsize=(12, 8))
barplot = sns.barplot(x=MBTI_EDA_ENFJ['ENFJ'], y=MBTI_EDA_ENFJ.index, palette='Set2')

# Annotate each bar with its value (ChatGPT, 2023)
for index, value in enumerate(MBTI_EDA_ENFJ['ENFJ']):
    barplot.text(value, index, f'{value:.2f}', va='center', fontsize=10, color='black')

plt.title('Top 20 Words Associated with ENFJ Personality Type', fontsize=16)
plt.xlabel('Average Frequency', fontsize=14)
plt.ylabel('Words', fontsize=14)
plt.grid(axis='x', linestyle='--', alpha=0.6)

# Display the plot (ChatGPT, 2023)
plt.show()


# Extract EDA data for the ENFP personality type, sort, and select the top 20 (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
MBTI_EDA_ENFP.sort_values('ENFP', ascending=False, inplace=True)
MBTI_EDA_ENFP = MBTI_EDA_ENFP.head(20)

# Set up a horizontal bar plot with annotations using a vivid color palette (ChatGPT, 2023)
plt.figure(figsize=(12, 8))
barplot = sns.barplot(x=MBTI_EDA_ENFP['ENFP'], y=MBTI_EDA_ENFP.index, palette='Set2')

# Annotate each bar with its value (ChatGPT, 2023)
for index, value in enumerate(MBTI_EDA_ENFP['ENFP']):
    barplot.text(value, index, f'{value:.2f}', va='center', fontsize=10, color='black')

plt.title('Top 20 Words Associated with ENFP Personality Type', fontsize=16)
plt.xlabel('Average Frequency', fontsize=14)
plt.ylabel('Words', fontsize=14)
plt.grid(axis='x', linestyle='--', alpha=0.6)

# Display the plot (ChatGPT, 2023)
plt.show()


# Extract EDA data for the ESTP personality type, sort, and select the top 20 (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
MBTI_EDA_ESTP = MBTI_EDA[['ESTP']]
MBTI_EDA_ESTP.sort_values('ESTP', ascending=False, inplace=True)
MBTI_EDA_ESTP = MBTI_EDA_ESTP.head(20)

# Set up a horizontal bar plot with annotations using a vivid color palette (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
plt.figure(figsize=(12, 8))
barplot = sns.barplot(x=MBTI_EDA_ESTP['ESTP'], y=MBTI_EDA_ESTP.index, palette='Set2')

# Annotate each bar with its value (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
for index, value in enumerate(MBTI_EDA_ESTP['ESTP']):
    barplot.text(value, index, f'{value:.2f}', va='center', fontsize=10, color='black')

plt.title('Top 20 Words Associated with ESTP Personality Type', fontsize=16)
plt.xlabel('Average Frequency', fontsize=14)
plt.ylabel('Words', fontsize=14)
plt.grid(axis='x', linestyle='--', alpha=0.6)

# Display the plot (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
plt.show()


# Extract EDA data for the INTP personality type, sort, and select the top 20 (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
MBTI_EDA_INTP = MBTI_EDA[['INTP']]
MBTI_EDA_INTP.sort_values('INTP', ascending=False, inplace=True)
MBTI_EDA_INTP = MBTI_EDA_INTP.head(20)

# Set up a horizontal bar plot with annotations using a vivid color palette (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
plt.figure(figsize=(12, 8))
barplot = sns.barplot(x=MBTI_EDA_INTP['INTP'], y=MBTI_EDA_INTP.index, palette='Set2')

# Annotate each bar with its value (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
for index, value in enumerate(MBTI_EDA_INTP['INTP']):
    barplot.text(value, index, f'{value:.2f}', va='center', fontsize=10, color='black')

plt.title('Top 20 Words Associated with INTP Personality Type', fontsize=16)
plt.xlabel('Average Frequency', fontsize=14)
plt.ylabel('Words', fontsize=14)
plt.grid(axis='x', linestyle='--', alpha=0.6)

# Display the plot (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
plt.show()


# Extract EDA data for the ISTJ personality type, sort, and select the top 20 (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
MBTI_EDA_ISTJ = MBTI_EDA[['ISTJ']]
MBTI_EDA_ISTJ.sort_values('ISTJ', ascending=False, inplace=True)
MBTI_EDA_ISTJ = MBTI_EDA_ISTJ.head(20)

# Set up a horizontal bar plot with annotations using a vivid color palette (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
plt.figure(figsize=(12, 8))
barplot = sns.barplot(x=MBTI_EDA_ISTJ['ISTJ'], y=MBTI_EDA_ISTJ.index, palette='Set2')

# Annotate each bar with its value (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
for index, value in enumerate(MBTI_EDA_ISTJ['ISTJ']):
    barplot.text(value, index, f'{value:.2f}', va='center', fontsize=10, color='black')

plt.title('Top 20 Words Associated with ISTJ Personality Type', fontsize=16)
plt.xlabel('Average Frequency', fontsize=14)
plt.ylabel('Words', fontsize=14)
plt.grid(axis='x', linestyle='--', alpha=0.6)

# Display the plot (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
plt.show()


#We get a chart of the most probable words being used in the posts of some of the personality types. (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
#Model building
#Now we will build a model to predict each personality type from the words used. (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]

# List of personality types
Personalities = ['INFP','INFJ','INTP','INTJ','ENTP','ENFP','ISTP','ISFP','ENTJ','ISTJ','ENFJ','ISFJ','ESTP','ESFP','ESFJ','ESTJ']
# Create an empty DataFrame to store feature importance (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
Feature_Importance = pd.DataFrame()

# Randomly sample 5% of the MBTI DataFrame (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
MBTI =  MBTI.sample(frac=0.05)

# Train Random Forest classifiers for each personality type and evaluate performance (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
for i in Personalities:
  # Create a temporary copy of the MBTI DataFrame (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
    Temp = MBTI.copy()
    # Convert the 'Personality Type' column to binary values (1 if it matches the current personality type, 0 otherwise) (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
    Temp['Personality Type'] = Temp['Personality Type'].apply(lambda x: 1 if x==i else 0)
    # Split the data into features (X) and target (y) (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
    X = Temp.drop('Personality Type',axis=1)
    y = Temp['Personality Type']
    # Split the data into training and testing sets (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
    X_train, X_test, y_train, y_test = train_test_split(X,y,train_size=0.7,random_state=100)
     # Initialize a Random Forest classifier (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
    Model = RandomForestClassifier(n_jobs=-1,random_state=100,class_weight='balanced')
     # Define hyperparameter grid for grid search (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
    params = {'n_estimators':[100],
              'max_depth':[3,5,7,10,12,15],
              'max_features':[0.05,0.1,0.15,0.2],
              'criterion':["gini","entropy"]}
     # Perform grid search for hyperparameter tuning (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]
    grid_search = GridSearchCV(estimator=Model,param_grid=params,verbose=1,n_jobs=-1,scoring='accuracy')
    grid_search.fit(X_train,y_train)
     # Get the best estimator from the grid search (ChatGPT, 2023)
MBTI_EDA_ENFP = MBTI_EDA[['ENFP']]c
    Model_best = grid_search.best_estimator_
    # Predictions on training and testing sets (ChatGPT, 2023)
    y_train_pred = Model_best.predict(X_train)
    y_test_pred = Model_best.predict(X_test)

    # Print results for each personality type (ChatGPT, 2023)
    print(i)
    print('Train Accuracy :',accuracy_score(y_train,y_train_pred))
    print('Test Accuracy :',accuracy_score(y_test,y_test_pred))

    # Save feature importance in the Feature_Importance DataFrame (ChatGPT, 2023)
    Feature_Importance['Feature'] = X_train.columns
    Feature_Importance[i] = Model_best.feature_importances_

# Train XGBoost classifiers for each personality type and evaluate performance (ChatGPT, 2023)
for i in Personalities:
   # Create a temporary copy of the MBTI DataFrame (ChatGPT, 2023)
    Temp = MBTI.copy()
    # Convert the 'Personality Type' column to binary values (1 if it matches the current personality type, 0 otherwise) (ChatGPT, 2023)
    Temp['Personality Type'] = Temp['Personality Type'].apply(lambda x: 1 if x == i else 0)
     # Split the data into features (X) and target (y) (ChatGPT, 2023)
    X = Temp.drop('Personality Type', axis=1)
    y = Temp['Personality Type']
    # Split the data into training and testing sets (ChatGPT, 2023)
    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=100)
     # Initialize an XGBoost classifier
    Model = XGBClassifier(objective='binary:logistic', random_state=100)
    # Define hyperparameter grid for grid search (ChatGPT, 2023)
    params = {'n_estimators': [100],
              'max_depth': [3, 5, 7, 10, 12, 15],
              'max_features': [0.05, 0.1, 0.15, 0.2],
              'criterion': ["gini", "entropy"]}
    # Perform grid search for hyperparameter tuning (ChatGPT, 2023)
    grid_search = GridSearchCV(estimator=Model, param_grid=params, verbose=1, n_jobs=-1, scoring='accuracy')
    grid_search.fit(X_train, y_train)

     # Get the best estimator from the grid search (ChatGPT, 2023)
    Model_best = grid_search.best_estimator_

    # Predictions on training and testing sets (ChatGPT, 2023)
    y_train_pred = Model_best.predict(X_train)
    y_test_pred = Model_best.predict(X_test)

    # Print results for each personality type (ChatGPT, 2023)
    print(i)
    print('Train Accuracy:', accuracy_score(y_train, y_train_pred))
    print('Test Accuracy:', accuracy_score(y_test, y_test_pred))

    # Save feature importance in the Feature_Importance DataFrame (ChatGPT, 2023)
    Feature_Importance['Feature'] = X_train.columns
    Feature_Importance[i] = Model_best.feature_importances_

# Train Logistic Regression classifiers for each personality type and evaluate performance (ChatGPT, 2023)
for i in Personalities:
# Create a temporary copy of the MBTI DataFrame (ChatGPT, 2023)
    Temp = MBTI.copy()
    # Convert the 'Personality Type' column to binary values (1 if it matches the current personality type, 0 otherwise) (ChatGPT, 2023)
    Temp['Personality Type'] = Temp['Personality Type'].apply(lambda x: 1 if x == i else 0)
    # Split the data into features (X) and target (y) (ChatGPT, 2023)
    X = Temp.drop('Personality Type', axis=1)
    y = Temp['Personality Type']
    # Split the data into training and testing sets (ChatGPT, 2023)
    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=100)
    # Initialize a Logistic Regression classifier (ChatGPT, 2023)
    Model = LogisticRegression(class_weight='balanced', random_state=100)
    # Define hyperparameter grid for grid search (ChatGPT, 2023)
    params = {
        'penalty': ['l1', 'l2'],
        'C': [0.001, 0.01, 0.1, 1, 10, 100]
    }
    # Perform grid search for hyperparameter tuning (ChatGPT, 2023)
    grid_search = GridSearchCV(estimator=Model, param_grid=params, verbose=1, n_jobs=-1, scoring='accuracy')
    grid_search.fit(X_train, y_train)
    # Get the best estimator from the grid search (ChatGPT, 2023)
    Model_best = grid_search.best_estimator_
    # Predictions on training and testing sets (ChatGPT, 2023)
    y_train_pred = Model_best.predict(X_train)
    y_test_pred = Model_best.predict(X_test)
    # Print results for each personality type (ChatGPT, 2023)
    print(i)
    print('Train Accuracy:', accuracy_score(y_train, y_train_pred))
    print('Test Accuracy:', accuracy_score(y_test, y_test_pred))

    # Logistic Regression does not have hidden layers or coefs_, so feature importance can be accessed directly (ChatGPT, 2023)
    Feature_Importance[i] = Model_best.coef_[0]

# Display feature importances (ChatGPT, 2023)
print(Feature_Importance)

#comparing which argorythms give the best results (ChatGPT, 2023)

accuracies = pd.DataFrame(index=['Random Forest', 'XGBoost', 'Logistic Regression'], columns=['Accuracy'])
# Random Forest (ChatGPT, 2023)
rf_model = RandomForestClassifier(random_state=100)
rf_scores = cross_val_score(rf_model, X, y, cv=5, scoring='accuracy')
accuracies.loc['Random Forest', 'Accuracy'] = rf_scores.mean()

# XGBoost (ChatGPT, 2023)
xgb_model = XGBClassifier(objective='binary:logistic', random_state=100)
xgb_scores = cross_val_score(xgb_model, X, y, cv=5, scoring='accuracy')
accuracies.loc['XGBoost', 'Accuracy'] = xgb_scores.mean()

# Logistic Regression (ChatGPT, 2023)
lr_model = LogisticRegression(random_state=100)
lr_scores = cross_val_score(lr_model, X, y, cv=5, scoring='accuracy')
accuracies.loc['Logistic Regression', 'Accuracy'] = lr_scores.mean()

# Display the accuracies (ChatGPT, 2023)
print(accuracies)

As evident from the results, all algorithms performed well, with XGBoost and Logistic Regression standing out for their notably high accuracy. In particular, XGBoost and Logistic Regression demonstrated strong performance in this context!

# Display the head of the Feature_Importance DataFrame (ChatGPT, 2023)
Feature_Importance.head()

#END (ChatGPT, 2023)
